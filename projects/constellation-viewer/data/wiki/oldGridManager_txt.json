{
  "title": "oldGridManager_txt",
  "content": "# oldGridManager.txt\n\nContent-Type: text/x-zim-wiki\nWiki-Format: zim 0.6\nCreation-Date: 2024-07-22T19:50:46-07:00\n\n====== oldGridManager.txt ======\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class GridManager : MonoBehaviour\n{\n\tpublic int gridWidth = 10;\n\tpublic int gridHeight = 10;\n\tpublic int gridDepth = 10;\n\tpublic float spacing = 1f;\n\tpublic Material lineMaterial;\n\tpublic bool showGrid = true;\n\tpublic KeyCode toggleGridKey = KeyCode.H;\n\tpublic bool snapEnabled = true;\n\n\tprivate GameObject gridContainer;\n\tprivate GameObject currentBoundingBox;\n\tpublic LineRenderer lineRendererPrefab; // Assign a LineRenderer prefab in the Unity Inspector\n\tprivate LineRenderer currentLineRenderer;\n\n\n\tprivate Bounds gridBounds;\n\n\tprivate List<GameObject> objectsInGrid = new List<GameObject>();\n\n\tprivate void Start()\n\t{\n\t\tgridContainer = new GameObject(\"GridContainer\");\n\t\tgridContainer.transform.SetParent(transform);\n\n\t\tDrawGrid(gridWidth, gridHeight, gridDepth, spacing);\n\n\t\tif (!showGrid)\n\t\t{\n\t\t\tgridContainer.SetActive(false);\n\t\t}\n\n\t\t// Initialize bounding box line renderer\n\t\tcurrentLineRenderer = Instantiate(lineRendererPrefab);\n\t\tUpdateBoundingBox();\n\t}\n\n\tprivate void Update()\n\t{\n\t\tif (Input.GetKeyDown(KeyCode.G) || Input.GetKeyDown(toggleGridKey))\n\t\t{\n\t\t\tToggleGridVisibility();\n\t\t}\n\n\t\t// Update the bounding box every frame\n\t\tUpdateBoundingBox();\n\n\t\t// Snap this object to the grid\n\t\tif (snapEnabled)\n\t\t{\n\t\t\tVector3 snappedPosition = SnapToNearestGridPoint(transform.position);\n\t\t\ttransform.position = snappedPosition;\n\t\t}\n\t}\n\n\t// Draws the 3D grid lines\n\tprivate void DrawGrid(int gridWidth, int gridHeight, int gridDepth, float spacing)\n\t{\n\t\tfor (int x = 0; x <= gridWidth; x++)\n\t\t{\n\t\t\tfor (int y = 0; y <= gridHeight; y++)\n\t\t\t{\n\t\t\t\tDrawLine(new Vector3(x * spacing, y * spacing, 0), new Vector3(x * spacing, y * spacing, gridDepth * spacing));\n\t\t\t}\n\t\t}\n\n\t\tfor (int x = 0; x <= gridWidth; x++)\n\t\t{\n\t\t\tfor (int z = 0; z <= gridDepth; z++)\n\t\t\t{\n\t\t\t\tDrawLine(new Vector3(x * spacing, 0, z * spacing), new Vector3(x * spacing, gridHeight * spacing, z * spacing));\n\t\t\t}\n\t\t}\n\n\t\tfor (int z = 0; z <= gridDepth; z++)\n\t\t{\n\t\t\tfor (int y = 0; y <= gridHeight; y++)\n\t\t\t{\n\t\t\t\tDrawLine(new Vector3(0, y * spacing, z * spacing), new Vector3(gridWidth * spacing, y * spacing, z * spacing));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Draws a single line\n\tprivate void DrawLine(Vector3 start, Vector3 end)\n\t{\n\t\tGameObject lineObj = new GameObject(\"Line\");\n\t\tlineObj.transform.SetParent(gridContainer.transform);\n\n\t\tLineRenderer lr = lineObj.AddComponent<LineRenderer>();\n\t\tlr.material = lineMaterial;\n\t\tlr.startWidth = 0.05f;\n\t\tlr.endWidth = 0.05f;\n\n\t\tlr.SetPosition(0, start);\n\t\tlr.SetPosition(1, end);\n\t}\n\n\t// Snaps a position to the nearest grid point\n\tpublic Vector3 SnapToNearestGridPoint(Vector3 position)\n\t{\n\t\treturn new Vector3(\n\t\t\tMathf.Round(position.x / spacing) * spacing,\n\t\t\tMathf.Round(position.y / spacing) * spacing,\n\t\t\tMathf.Round(position.z / spacing) * spacing\n\t\t);\n\t}\n\n\t// Toggles the grid's visibility\n\tpublic void ToggleGridVisibility()\n\t{\n\t\tshowGrid = !showGrid;\n\t\tgridContainer.SetActive(showGrid);\n\t}\n\n\tprivate void UpdateBoundingBox()\n\t{\n\t\t// Create 8 vertices of the bounding box\n\t\tVector3[] vertices = new Vector3[8];\n\n\t\t// Bottom vertices\n\t\tvertices[0] = SnapToNearestGridPoint(new Vector3(0, 0, 0));\n\t\tvertices[1] = SnapToNearestGridPoint(new Vector3(gridWidth * spacing, 0, 0));\n\t\tvertices[2] = SnapToNearestGridPoint(new Vector3(gridWidth * spacing, 0, gridDepth * spacing));\n\t\tvertices[3] = SnapToNearestGridPoint(new Vector3(0, 0, gridDepth * spacing));\n\n\t\t// Top vertices\n\t\tvertices[4] = SnapToNearestGridPoint(new Vector3(0, gridHeight * spacing, 0));\n\t\tvertices[5] = SnapToNearestGridPoint(new Vector3(gridWidth * spacing, gridHeight * spacing, 0));\n\t\tvertices[6] = SnapToNearestGridPoint(new Vector3(gridWidth * spacing, gridHeight * spacing, gridDepth * spacing));\n\t\tvertices[7] = SnapToNearestGridPoint(new Vector3(0, gridHeight * spacing, gridDepth * spacing));\n\n\t\t// Connect vertices to form the bounding box\n\t\tcurrentLineRenderer.positionCount = 16;\n\t\tcurrentLineRenderer.SetPositions(new Vector3[]\n\t\t{\n\t\t\tvertices[0], vertices[1], vertices[2], vertices[3], vertices[0],\n\t\t\tvertices[4], vertices[5], vertices[6], vertices[7], vertices[4],\n\t\t\tvertices[1], vertices[5], vertices[2], vertices[6], vertices[3], vertices[7]\n\t\t});\n\t}\n}\n\n\n\n## Metadata\n- **Source**: All of it Anything Everything At Once/oldGridManager.txt.txt\n- **Type**: document\n- **Tags**: document, All_of_it_Anything_Everything_At_Once\n- **Imported**: 2025-05-05T16:25:37.152Z",
  "source": {
    "type": "notebook",
    "path": "All of it Anything Everything At Once/oldGridManager.txt.txt",
    "importedAt": "2025-05-05T16:25:37.152Z"
  },
  "created": "2025-05-05T16:25:37.152Z",
  "modified": "2025-05-05T16:25:37.152Z",
  "tags": [
    "document",
    "All_of_it_Anything_Everything_At_Once"
  ]
}