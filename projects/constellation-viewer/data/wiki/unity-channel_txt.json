{
  "title": "unity-channel_txt",
  "content": "# unity-channel.txt\n\nContent-Type: text/x-zim-wiki\nWiki-Format: zim 0.6\nCreation-Date: 2024-07-23T15:49:53-07:00\n\n====== unity-channel.txt ======\n\r\nAmplify Imposters\r\nAmplify Occlusion\r\nDeckard Render\r\nGaia 2021\r\nGrassFlow\r\nInfiniCLOUD\r\nInfini GRASS\r\niStep\r\nOpsive\r\nKWS Water System\r\nMtree\r\nNext-Gen Soft-Shadows\r\nObi-Rope, Puppet Master\r\nReal Stars Skybox Plus \r\nRewired\r\nThe Vegetation Engine [+] Amplify Imposters module \r\nUModeler\r\n\r\nSome recommendations I will do research on\r\nUniRX\r\nFinal IK\r\nAmplify Imposters\r\nVegetation Studio Pro\r\nA*Pathfinding Pro\r\nPrefab Brush\r\nAdvanced Pooling System\r\nDynamic Bone\r\nZenject\r\nMaster Audio\r\nReUiniter\r\nFavorite Tabs\r\nBetter Coroutines\r\nDynamic Bone\r\nEditor Console Pro\r\nQHierarchy\r\nConsole Enhanced\r\nHierarchy Pro\r\nAmplify Shader Editor\r\nEasy Save\r\nSectr Audio\r\nRewired\r\nFont Setter-Packer\r\nDOTTween\r\nOdin Inspector\r\nSpine\r\nSimple Animation Component\r\n \r\n[2:51 PM]Glitch: The ‘Grid Point’ & ‘Point Note’ Systems: Here's the Google Doc to describe these (not done) scripts.\r\nhttps://docs.google.com/document/d/1xbTKyToo5DTu0k9r_4vkBYuygUmj11T1WA-JvWZ7dAE/edit\r\n\r\nThe Point Note System:\r\nAllows users to attach notes to objects in the game world and link them using UI point-lines. An auto-indexing dictionary manages notes and a scrollbar facilitates navigation between them. This system provides a way to manage notes that are associated with specific points in the game world.\r\n\r\nThe Grid Point System:\r\nWorks with the Point Note System to provide a more precise way of positioning objects in the game world. It uses a grid system to define points in 3D space, eliminating floating point errors. This system manages a grid of points in the game world, and can be used for positioning and snapping objects or creating a structured environment.\r\n\r\nThe Note System:\r\nEnables players to attach text notes to objects in the game world, with the ability to edit, delete, or link notes using connection lines. Notes are auto-indexed, and a scrollbar facilitates navigation between them. This system provides a way to gather notes throughout the game world while exploring freely.\r\n\r\n[...] \r\n[10:00 PM]Jcorella: Great for drafting, horrible for production.\r\nCareful you dont end up with a yandere simulator code mess.\r\nIt's impossible to debug properly without context of implementation. Any programmer going through will have to pretty much start form the ground up.\r\n[10:59 AM]Glitch: best I could manage without them being totally finished. proof will come when they're functional\r\n[11:00 AM]Glitch: check the link above\r\n[10:09 AM]Glitch: Here are some recent GitHub Repositories I've added to my system\r\n- firebase-unity-sdk (linked to a host site: access to ML resources\r\n- ml-agents (Unity's source project for ML agents)\r\n- veritable-games-repository (where we'll share creative stuff)\r\n- dodec-systems (where I'll be keeping a reserve of all my systems)\r\n- amp.dev (a requisite for other systems)\r\n\r\nAnd then here are some plugins I've found recently\r\n- ChatGPT-Unity-Bookmark-main\r\n- ChatGPT-into-Unity-main\r\n- UnityChatGPTScriptGenerator-main\r\n- DialogueDreamland-main\r\n- AIShader-main\r\n\r\n@Anarco (Rorschach) I've done a lot of the grunt work here. Most of the backend systems are integrated. (to the best of my knowledge) I tried the plugin I bought on the asset store but there were continual issues I could not find a workaround for. I have the secret key for ChatGPT and the organization info for Firebase, then my domain. I dis all the background Node work. All of the environments are setup like they ought to be. Just need to resolve these last components.\r\n[10:10 AM]Glitch: Future-proofing is how I'd describe what I'm doing here. We will need AI systems. ML is how we teach them.\r\n[10:13 AM]Glitch: I've got books and books and books to transcribe for our reference. But this all takes precedent. The engine work is where our most-tangible progress is shown to people. The design docs have made huge strides, too. But they are likewise unfinished. I am way too focused on the backend right now.\r\n[7:31 PM]Glitch: fuck. this is like fiction\r\n[7:42 PM]Glitch: https://langchain.readthedocs.io/en/latest/getting_started/getting_started.html\r\n[8:07 PM]Glitch: these threads just go on...ahahaha\r\n[6:06 AM]Glitch: https://www.youtube.com/watch?v=kYRB-vJFy38\r\nYouTube\r\nData Independent\r\nLangChain 101: Quickstart Guide\r\nImage\r\n[6:16 AM]Glitch: https://www.youtube.com/watch?v=nE2skSRWTTs\r\nYouTube\r\nJames Briggs\r\nGetting Started with GPT-3 vs. Open Source LLMs - LangChain #1\r\nImage\r\nGlitch\r\n pinned \r\na message\r\n to this channel. See all \r\npinned messages\r\n.\r\n — 03/22/2023 2:40 PM\n\n\n## Metadata\n- **Source**: All of it Anything Everything At Once/unity-channel.txt.txt\n- **Type**: document\n- **Tags**: document, All_of_it_Anything_Everything_At_Once, dialogue, bug\n- **Imported**: 2025-05-05T16:25:37.212Z",
  "source": {
    "type": "notebook",
    "path": "All of it Anything Everything At Once/unity-channel.txt.txt",
    "importedAt": "2025-05-05T16:25:37.212Z"
  },
  "created": "2025-05-05T16:25:37.212Z",
  "modified": "2025-05-05T16:25:37.212Z",
  "tags": [
    "document",
    "All_of_it_Anything_Everything_At_Once",
    "dialogue",
    "bug"
  ]
}