{
  "title": "ksp-gdc",
  "content": "# ksp-gdc\n\nContent-Type: text/x-zim-wiki\nWiki-Format: zim 0.6\nCreation-Date: 2024-07-23T23:08:41-07:00\n\n====== ksp-gdc ======\n\n\nall right well welcome everybody my name is Felipe I'm Lea developer on Kerbal\n\nspace program also known in the community as Harvester and joining me\n\ntoday is Mike Elin over there he's our gaming tools developer and we're gonna\n\ntalk about KSP today and we've just got here and have no idea what the suck is\n\nabout criminal space program is a game about running your own space program so\n\nyou get to build spacecraft in a construction facility by assembling parts together and later launch your\n\nproud space herring vehicle into space and one of the big things about Kerbal\nKerbal Space Program\n\nspace program is that failure is part of the fun and there's quite a lot of\n\nfailure along the way but once you manage to get up there you get accurate\n\norbital mechanics and an entire solar systems Explorer so you get to land on\n\nother planets and moons splint your flag walk around the surface build space stations and construct spaceship by\n2:55\ndocking vessels together in orbit and ultimately you're managing your entire\n3:01\nspace program in career mode which is what we're developing at the moment because Kerbal space program is still\n3:08\nvery much in development we've been following this iterative development\nDevelopment Method\n3:13\nmethod so we do we started out doing three week development cycles and every\n3:20\nthree weeks we put out a new version which was supposed to be stable so our\n3:26\nfocus is always on at the end of each release cycle we end up with something\n3:32\nthat's playable even though it might not be complete it's stable enough and it\n3:37\nrepresents the concept as as well as it possibly can so on that screenshot is\n3:44\nsee KSP version 0.3 we have a placeholder parts placeholder in UI\n3:50\nplaceholder terrain really solder just about everything and from that version\n3:56\nwhich the max was when we started actually going full-scale with it\n4:03\nbecause up until here we were testing out basic mechanics and everything and KSP version zero point four was when we\n4:10\nstarted actually tackling the problem of doing terrain on massive scale and we\n4:18\nquickly ran into floating-point issues because I don't know if you ever tried\n4:24\nbut if if you just move an object in the scene very very far away you start\n4:30\ngetting all sorts of crazy effects and that's because you really require very\n4:39\nlarge numbers to do a space simulation and a 32-bit flow can only hold so much\n4:46\nso if you've got a relatively small number you get all the rest for your\n4:53\ndecimal places and it's accurate enough but if your values start getting starts\n4:59\ngetting like really really high then you need to start losing digits on the\n5:05\nright-hand side of the decimal point which means the higher you go the more precision you lose and eventually things\nSo how far can we go?\n5:14\nstarts to break down so how far can we go with 32-bit floats just launching a\n5:22\nship from the scene origin say the launch pad is at the origin and about 20 kilometers out you can see some\n5:28\njittering already this is from version 0.3 you can see it's already slightly\n5:35\njiggling at 100 kilometers out it's very visible I wasn't doing anything this is\n5:42\npure jitter and if you go much further out things start getting like really bad\n5:51\nso we need to do something about that because really there's still a long way\n5:57\nto go here so the the solution for this\n6:04\nis actually well known in the year 3000\n6:10\nbasically you don't move the ship you move the universe around the and this is\n6:18\ncalled floating origin so basically how it works is we set a threshold which in\n6:25\nour case is six kilometers and if we move it the ship past the threshold we\n6:32\ngrab everything the ship meshes scenery\n6:37\nparticles and we move it back so that the ship is back at the origin so what\n6:44\nthis lets us do is that we can't really work around having to use 32-bit floats so the physics on a 32-bit transfer\n6:53\nmatrices or 32-bit so it's not really about precision it's about resolution so\n7:00\nif we can stay near the origin we've got enough spatial resolution to\n7:05\nhave a decently accurate simulation so the idea is that we're always near the scene origin and everything around us\n7:13\ncan be built or rendered with nice enough precision and stuff that's far\n7:20\naway will slow jitter but it's far away so well it doesn't really matter as much\n7:26\nbut we still do need a way to hold that beta in high precision and for that we\n7:31\ndo need to use 64-bit doubles so what we did is we created clones of vectors and\n7:38\nquaternions called vector 3d and quaternion D which do exactly what vector 3 in quaternion do but with\n7:45\ndouble precision values inside they even have the same methods and everything so\n7:50\nwe can do everything we did with you get any data types in there were precision so all our orbit maths and such\n7:59\ncalculations are done in double precision and we store those in our controllers for celestial bodies\n8:06\nand orbits and stuff and then we assigned them to transform position continuously so as you approach an\n8:14\nobject you this object is actually approaching you and it's approaching the\n8:20\nhigh-resolution space around you so this is how we manage to keep floating point\n8:27\nimprecision relatively under control but it's really an ongoing battle with it\n8:33\nbecause we found floating point issues just about anywhere one of the most\n8:39\nfamous cases of course is a space kraken which is not because we're just going\n8:46\nvery far we're getting there very very fast so the thing with the space kraken\n8:52\nit's a floating point imprecision also effects your velocity because velocity is also a 32-bit vector so and because\n9:03\nour ship it's not really just a single object it's made of several multiple\n9:08\nconnected rigid bodies each one of them has its own velocity in it each one is\n9:15\ngetting truncated and it's sewn different ways so the satans of being attacked by the Kraken include phantom\n9:22\nforces that steer you off course and this is the first manifestation as you\n9:27\ngo faster you completely lose control and eventually things start coming apart\n9:34\nso a solution for that is Krakens Bane\n9:39\nyes we did the feat the Kraken eventually and it's basically the same\n9:46\nthing as floating origin but for velocity so what we did here was to create this reference frame which\n9:53\nabsorbs the velocity of the vessel so that means we set a threshold for a maximum velocity you can have what\n10:00\nphysically and after you exceed that threshold we zero out the velocity of the vessel and we update that and we\n10:08\npass it along to the reference frame so instead of the ship moving very fast we\n10:14\nhave this reference frame which holds double precision velocity value which\n10:19\nmoves everything else the other way around so that way and we constantly\n10:25\nkeep that updated so as forces act on the vessel like gravity and your\n10:30\nvelocity changes we're also always ziering it out and applying it to this\n10:36\nmoving velocity frame so when you slow back down whatever velocity still\n10:42\nremains on the frame we apply it back to the vessel and it uh it resumes normal\n10:48\nphysics so that leads to see the setup of the universe and how we put it all\n10:54\ntogether so the big thing with KSP and how its set up is that we've gone so\n11:00\nscenes and some scenes are basically scenes within a scene on different\nSubscenes\n11:08\nlayers so each scene is rendered by its own set of cameras so they all exist in\n11:17\nthe same space but they're rendered differently and they all can have their own reference frames\n11:22\nso in KSP we have three of those we have local space scaled space and internal\n11:27\nspace and local space is our one-to-one scale main game environment where you\n11:35\nhave your scenery and all the ships farts they all live in local space and\n11:40\nthis is actually the scene orientation the Kerbal space center is actually\n11:45\nsideways because it sits at the equator of carbon so world space is a generally\n11:52\nmeaningless term to us now and scale\n11:57\nspace is or when you when you're sitting at the launch pad and you look up at the moon what you're seeing is actually the\n12:04\nscale space version of the Moon which is a 1 to 6,000 scale miniature of the\n12:10\nsolar system which we use because it's much easier to manage these things on a\n12:17\nmuch smaller scale so for instance kerbin is only a hundred meters on scale\n12:23\nspace so that gives us a much more usable area to work in\n12:29\nand sit and do stuff like rendering the atmosphere and rendering orbit splines and things like that and skill space\n12:36\nalso doubles as a map to you but I will get into the in a bit third one is internal space internal\n12:42\nspace is where we do our internal views which are used both for the inside cockpit view and the crew portraits you\n12:49\nsee on the bottom right of the screen so\n12:54\nsorry so with internal space we when you're looking at it from the inside we render\n13:01\nonly the internal space that contains the Kerbal you're currently possessing\n13:08\nand we remove his head as well so you can look around and the head mesh doesn't get in the way and as you switch\n13:15\nviews we switch internal meshes and we remove heads as necessary and in the end\n13:24\nwe put it all together like this what you see on the back of the fruit of this\n13:30\nlayer gets drawn first and that's a scale space rendering which holds the the galaxy skybox the the atmosphere and\n13:38\nthen the two metal ones are our local space we actually had to divide it\n13:43\nbecause even though we have the local space scale space thing going on senior\n13:52\nyou still too large to be rendered by a single camera so we have a lot of z-fighting issues and the way we worked\n13:57\naround that was to have a new camera which renders everything from very close up to about five hundred units away and\n14:05\nthen we have the far camera which renders from there on until it all fades\n14:11\naway and then you get scale space so on top of that we draw the UI or when\n14:16\nyou're in internal view we draw the internal camera and what it renders so\n14:22\nit all renders on top of each other and it composes into a single image so next\n14:29\nup are the orbital mechanics themselves basically we had to make a big decision\n14:36\nhere of how we were gonna simulate orbits and we ran into several issues with\nPhysics Integration Issues\n14:43\nphysics and physics and physics integration basically problems our\n14:53\nphysics our integration based and integration means that you compute the\n15:00\nstate of an object based on its current state plus all forces acting on it so\n15:05\nyou figure out its velocity you figure out the time step and you move it forward but the problem with that is\n15:10\nthat the state of the object depends on the previous state so errors tend to\n15:15\naccumulate so what happens for instance if you're simulating an object orbiting a moon out in Jupiter\n15:22\nso that object way out there on in the boondocks or floating point and accuracy\n15:28\nis trying to do what it does but it's so inaccurate that it's probably gonna fall\n15:35\nout of the sky not to mention the moon itself being flung out and general mayhem like that so and apart from that\n15:43\nyou have issues with time warp because you either speed up time and you drop\n15:48\nframes and you lose accuracy or you simulate sub steps and you completely\n15:54\nkill your computer trying to do a hundred thousand times warp factor so\n16:01\nnot very viable for us so this is why deterministic physics are cool so\nDeterministic Physics are cool.\n16:08\ninstead of the computing your your rigid bodies through integration we run two\n16:16\nbody solver which is basically using another set of values and another set of\n16:24\na maths to calculate the problem so the state of the object becomes a function of time you can figure out where\n16:30\nsomething is gonna be just by passing in a time value which means you get to do\n16:36\nstuff like scrub time and time work becomes really very simple because all we need to do is multiply the ongoing\n16:42\nclock and with the single universal time value we can resume to save the entire\n16:48\nsystem so we don't need to save where everything is out in order but we just say one\n16:54\nuniversal time value and the whole solar system adapts to it so it's all\n17:01\npersistent and very reliable and there's no compromise and accuracy whatsoever because all you need is that one time\n17:07\nvalue and it's fun as well because these textbook type physics are very much what\nDeterministic Physics are fun, too.\n17:15\nyou find in a physics textbook so when you're trying to teach about physics and stuff like that usually it's well look\n17:23\nat how it went but it's not really like this because you have to account for a drive you have to account for gravity not being uniform and all that sort of\n17:30\nstuff in case people decided to do away with all that and really what you see is what you get because perturbations in\n17:38\npractice just tend to look like noise I can just imagine people coming to the forums complaining like hey my space\n17:44\nstation dropped out of the sky and I have no idea why and we say well that's not a bug it's a feature well it's kind\n17:49\nof hard to explain thousand time around so it's nice that we don't we have no\n17:56\ndifference between the actual trajectory and the predictive one because it's solved using the same math so the big\n18:04\ntrade-off though is that there can only be one gravity source at a time so that becomes a bit of a thing that we have to\n18:11\nwork around and we do that by using the concept of spheres of influence so we do\nSpheres of Influence\n18:16\nmultiple gravity sources one at a time so basically we figure out what the\n18:22\ndominant celestial body is based on where you are and if you're inside its sphere of influence and we calculate\n18:29\nyour orbital parameters as you transition so that's how we do being\n18:36\nable to go around and rub around a moon and stuff like that so these are your\nOrbital Parameters\n18:42\norbital parameters we use them in two ways we calculate them from position and velocity for vessels and for planets and\n18:50\nmoons they're manually defined so we basically build out the planetarium like\n18:55\nthis by just setting the orbital parameters for each planet and for each moon and we let them orbit based on the\n19:02\ngame clock and for spacecraft we have what became known as the rail system which is\n19:07\nbasically the same thing for spacecraft but the thing is here for spacecraft we are running physics but at some points\n19:14\nwe have to stop using physics and switch to the deterministic system which is\n19:20\nsomething we call going on rails what happens there is that all rigid bodies go kinematic then your controller\nGoing \"On-Rails\"\n19:27\nswitches to driver mode instead of just tracking and we calculate position and\n19:33\nvelocity from two body solver instead of physics and the same thing happens in\n19:39\nReverse for going off rails which we may call rigid bodies non kinematic again we\nGoing \"Off-rails\"\n19:45\nget the velocity from the two body solver and we basically throw the vessel\n19:50\nback into physics and then your Wii controller global goes back into being just a tracker and updating its own\n19:57\norbital parameters from the vessel and just watching it happen and then next up\n20:04\nis drawing orbits so to draw the splines we needed something to draw a line so we\nDrawing Orbits\n20:11\nuse a plugin called electricity to do the spline drawing and basically we\n20:16\nbuild the orbits plane just by using the solver we sample it along its course so\n20:23\nthat gives us a very nice way to just to give rabb an array of points by sampling\n20:28\nthe orbiter as it goes and and then we render it out in scale space so skill\nScaled Space doubles as Map View.\n20:38\nspace then double says or map view so when you hit em and you zoom out to the\n20:43\nmap what happens is we disable the local space camera so you don't see the scenery and you don't see the vessel and\n20:49\nwe fade in the orbit splines and then we disable the skills camera script which\n20:55\nis basically just a little script that tracks the local camera and applies the scale factor to it and on the same\n21:02\ncamera we enable the map camera script so that's how we do the map view just by\n21:09\nswitching the camera behavior and this map view was really important because the big thing about case\nSituational Awareness in Space.\n21:15\nthat it needs to be approachable and the problem the main problem I see with rugged science is that uh you have a\n21:23\nsevere lack of situational awareness you really don't know what's going on because it wasn't like a real easy\n21:30\nintuitive way to see it so the biggest challenge I think in KSP was this was how to convey what's going on in a way\n21:39\nthat's visual and informative but without just dumping a lot of data on\n21:44\nthe player so the map is fully 3d and you're free to move around and you're\n21:49\nfree to focus on different objects and view your orbit from every angle so that\n21:55\nway you get this much more intuitive understanding of what's going on just because of the way it's drawing in 3d\n22:03\nspace and you can move the camera around and see it from different angles so we\n22:08\nonly show numerical data when it's really needed so this is why we have things like sorry too early when you get\n22:18\nto when you hover over the nodes on the map view then we show what the node is\n22:24\nand what its values are so we're not flooding the players with numbers all\n22:29\nthe time because otherwise it's very easy to just fill the screen up with numbers and end up with something very\n22:35\nunattractive so finally we patch orbits together to\nPatching Orbits Together.\n22:42\ndo to do the full trajectory display now\n22:47\nI had a thirty more slides on this and I could go on and Leslie but uh it's not\n22:53\ngonna be enough time to cover how we do this but basically we use a rail system to predict where you're gonna be and\n22:59\nwhere each planet is gonna be by the time you get there and from that we figure out what your next orbit is gonna\n23:05\nbe inside the sphere of influence of that other body and so on and so forth\n23:12\nuntil we either reach some sort of limit or we reach in orbit where you can't\n23:18\nwhere you don't find I need more encounters or escapes and we display\n23:23\nthat using different time reference frames\n23:28\nI call it you can see that as you encounter the moon you don't really see your orbit around the moon you see it\n23:34\norbit around the moon in relation to carbon because the moon is also moving\n23:40\nso we're really essentially trying to show 4d data in a 3d space and there was\n23:47\na good deal of a hab bashing to figure out a way to show this in a way that makes the most sense yet eventually\n23:54\nsettled with this which is that we show your orbit locally for the planet you're orbiting and if you encounter a planet\n24:02\nsomewhere ahead we show that or a bit in relative frame which is what we call that each point is sample at the spot\n24:10\nit's gonna be at that time so that gives us some nice of squiggly line where you\n24:16\ncan see things like how you encountered the moon loop around it and jump back so\n24:25\nthat's basically how we do it forgot those and so you know this is another\n24:33\ninteresting part of the the game that I you felt was worth showing the reentry\n24:39\neffects and how we did that basically the problem with reentry effects was that we wanted the ship to look like it\n24:45\nwas catching in fire and you could see the plasma like looking the shape as it\n24:52\nwent but the big problem with this is a on more conventional game you'd have\n24:58\nthis effect done for the specific ship and have another version of it for another ship and so on\n25:03\nbut we don't know what the ship looks like we can just build anything so we needed to find a way to do this effect\n25:10\nthat would support any configuration of something you might build and apart from\n25:16\nthat we ran into another problem which is no one really knows what reentry effects look like there's a lot of image\nWhat does re-entry really look like?\n25:24\nimages on the internet if you just look for it but you can see that of all of\n25:30\nthese they're all artist's rendering none of them are actually a picture new\n25:35\nones that were you can't find like a really nice picture with what the reentry effect looks like so in the end we\n25:43\nsettled in trying to achieve this look which we broke down into two components\nFX Components\n25:50\nthe heat glow and the flame trail so for the heat glow we try a couple of things\n25:57\nand we try we thought about maybe an emissive texture or something like that\n26:03\nbut the emissive map was tricky because we don't really know the orientation of the ship so which way of it is actually\n26:10\nfacing the incoming air stream and well\n26:15\neventually worked best was to just use a light an orange light placed along the\n26:22\nvelocity stream so that was much easier actually so the flame trails were\n26:30\ntrickier the first attempt we tried to use God race and look it looked close to\n26:39\nwhat we wanted to achieve but it doesn't work unless your scene is a black backdrop with nothing else on it this\n26:45\ndoesn't work at all so we'd get flame trails on the UI on everything so and it\n26:53\ngenerally broke down so the second attempt was something more I remembered\n26:59\nseeing this effect for first shaders and free shaders work by having by drawing\n27:06\nthe same object again and again using shells and just having a transparent texture and I thought well maybe we can\n27:14\nabuse this in some way so I got a free shader and started tweaking and modified\n27:21\nshe's appreciated gave us this result basically we draw a multipass shader and\n27:27\nall of the shells are offset progressively along the well the\n27:34\nopposite of the velocity vector so they're running away from you and we and\n27:40\non top of that on each pass we run\n27:45\nslightly different parameters for opacity in color and things like that\n27:51\nso that started to look real nice and we do that we render it out in the game by\n27:57\nusing replaced shaders and an effects camera on top of all the other cameras we already had so um it's just one more\n28:05\ncamera at that point so we rendered the ship as normal and then we run the\n28:11\neffects bus which renders it again with a replaced shader and but the problem\n28:18\nwith that is it worked a little too well so every face would be on fire even back\n28:27\nfaces so that didn't look really right we get the the burning window effect as\n28:34\nit was named by the community so the way we solved that was to do essentially\n28:40\nshadow mapping we got a camera along the velocity vector that renders the ship\n28:47\nwhether that flexure and we projection map this step texture onto the ship and\n28:53\nthen on the shader we can check if the for each vertex if the depth of the\n29:01\nvertex matches the depth on the map and if it doesn't we occluded and if it does\n29:08\nit means that it's actually exposed to the air stream so that way we can mask off the areas that are occluded in\n29:14\nthey're not on fire and that pretty much solved the issue and then lastly we use\n29:22\nan animated texture map to actually modify the extrusion length of each pass\n29:28\nthat required us to use a vertex texture read which thankfully was possible on\n29:34\njaden 103 so this screenshot doesn't\n29:40\nreally convey what actually happens there is a video later on and we\n29:45\nactually got a nice bonus feature from this we got just by tweaking the parameters and the way we scaled the\n29:53\noffsets we got to do mac effects which basically use the same approach just\n29:59\nwith tweaked values so here we've got a\n30:04\nlittle video of the orbiting space station in the name of science and I'm\n30:12\nnot getting into wait why is this not\n30:17\nplaying ma'am sorry minor technical\n30:22\ndifficulties oh it's because we're not\n30:28\nconnected\n30:33\nbut they didn't get on the Wi-Fi that we we're not anymore um might have to skip\n30:41\nthis board sorry if we can get the connection back later we'll come back to\nProcedural Quad Sphere\n30:48\nit so next up is the terrain and for that part we we've got Mike who is at\n30:58\nfault for all that so testing hello\n31:08\nso our train system is called the procedural quad sphere or pqs basically\n31:20\nit's a method we use rendering the\n31:26\nterrain so we've got some sample shots here's a nice little mountain range and\n31:31\nsome planes in kerbin here's another mountain range and some lovely trees\n31:37\nscatter here's a view from KSC showing\n31:44\nsome more mountains actually so the aims of the system first of all we needed to\nPQS Aims\n31:51\nground to a bit level of detail system pretty important in space game we needed\n31:57\nplanetary scales kerbin is 600 kilometers in radius which is a couple\n32:06\nof million square kilometers we need to have a huge variation on the planets\n32:13\nthemselves I'm between the planets and something that's not you know\n32:20\nimmediately evident but it's quite important is we need to be able to sample the terrain without building the\n32:26\nmesh or building colliders so we can rake us-against-them this allows us to do lots of things\n32:32\nradar altitude and collision on objects which we're not in orbit of so for other\n32:40\nships in the solar system so what is a quad Sphere it's a spare made of quads first of all\nWhat is a Quad Sphere?\n32:50\nwe start with a distorted cube base and then we use a quadtree subdivision to\n32:56\nget the level of detail increases so what what does this look like here's\n33:02\nsomething which will never happen in the game it's a minus 1 sphere this would\n33:09\nnever happen because we never store the planet like this so I've had to mock it\n33:15\noff with planes in unity each each plane is 16 by 16 vertices then we do a few\n33:24\noperations on it and we end up with the level 0 sphere so this is the lowest resolution thing that we can have in the\n33:30\ngame as you can see the 6 planes are now mapped to the surface of the sphere here\n33:39\nis one of the planes selected you can see it's a nice curved shape and they\n33:44\nall match up edgewise so it's level 1 we've got 4 times the number of vertices\n33:51\nhere and you can see that the same plane that we had in the other one is\n33:58\nsubdivided into these four planes and let's move to level 2 so we can see that\n34:05\nthe upper-right quadrant we had in that plane has now been subdivided into 4\n34:12\ngiving us 4 4 times as many vertices\n34:17\nlevel 3 I'm getting quite a lot of vertices now level 4 pretty hardcore and\n34:25\nlevel 5 is pretty black so how many\n34:31\nvertices have we got kerbin 600 kilometers radius so the vertex\n34:39\nresolution is 75 kilometers in a level 0 sphere 1500 verts quite handleable the\n34:48\nlevel 5 SVC is 2.3 kilometers vertex resolution but it's 1.5 million the\n34:56\nwhich is pretty extreme now most fears run up to level 10 in the\n35:03\ngame which if we rendered it straight out would be 73 meters resolution which\n35:08\nis adequate for the game but it's 1.6 billion verse which unity would not\n35:15\nrender surprisingly so we need to use\nAdaptive subdivision\n35:21\nadaptive subdivision and to do this obviously we need to use distance to the\n35:26\ncamera we use various types of distance we've obviously got the linear distance\n35:32\nbut we've also got the Great Circle distance around the sphere and the\n35:37\nalgorithm to calculate the subdivision is quite complicated I'm not going to go\n35:44\ninto it but you asked me later I will do quite important is only subdividing\n35:52\nourselves one level higher than our neighbor quads this is quite important\n35:59\nbecause if you start to have four neighbor quads it gets quite complicated and we have the next point which is we\n36:07\nneed to avoid cracks so here's a level\n36:12\nzero to ten sphere you can see that the\n36:18\nwhere the subdivision changes it's only one subdivision level higher where the\n36:25\ntiny white circle is on the left that's where the cameras placed and under that will be subdivision level ten on the\n36:32\nopposite side of the sphere would be subdivision level zero how quickly that\n36:38\nchanges depends on parameters we enter but is all to do with the radius Great\n36:43\nCircle distance it's quite complicated so the dreaded cracks and now if we just\n36:51\ndo it simply we end up with nasty cracks which you can see here the quad in the\n36:59\nlower left is one subdivision level higher than the rest so its vertices\n37:05\nhave it's quads of twice as many verse so we end up with potentially as the vertexes change so we\n37:14\nuse a geomap mapping technique called well edge funds where we lurk the edge\n37:21\ntriangles so that they skip vertices so\n37:28\nthat they match up with the lowest subdivision on the other side\n37:34\nnow there's doing this high-performance\n37:40\nis quite tricky but quite simple when you think about it there are only 17\n37:45\npossible edge conditions for every quad the first one being that we are the same\n37:51\nsubdivision as all our neighbors so that means we just render a straight quad\n37:56\nwith all triangles then we we've\n38:02\nobviously got if the North Edge has two neighbors or the South Edge has two\n38:08\nneighbors or three edges have two neighbors or all four edges have two neighbors which would be pretty rare but\n38:15\nit's one of the edge conditions so it's one plus four to the power of two or\n38:23\nsomething so what we do is for each one of those edge conditions we case your triangle array and then we use a bitmap\n38:32\nbit mask to select the correct one this means we don't have to re triangulate\n38:38\nquads as we need to so here we are possible education this is our bit mask\n38:46\nso we assigned a value of 1 2 4 & 8 to the respective edges let's have a look\n38:54\nat that so here we've got a quad which has itself and East edges need loping so\n39:02\nusing the bitmap we need to lower east and south which would be 2 plus 4 so it\n39:08\nwould be the 6 index on the triangle array and as you can see we've got no\n39:15\ncracks now which is nice so how do we generate a quad first\nQuad Generation\n39:21\nthings first we need to generate diversities second thing we obviously\n39:26\nselect our triangle array then we create the mesh data which is just as simple\n39:34\ndumping the things into unity mesh for\nVertex Generation\n39:39\neach vertex we take our cached x-z quad and then we transform it with the TRS\n39:46\nmatrix this moves the points into a into\n39:53\nthe quad scale the quad orientation and then we need to normalize it which gives\n39:59\nus the direction of that vertex from the centre of the planet then we need to\n40:05\ngenerate the height and we also generate a vertex color in if we are using vertex\n40:12\nchannels on the planet so here is our\n40:17\nimpossible quad this would never exist in the game we run it through the matrix\n40:25\nand normalize it to get our distorted quad and then push push it through the\n40:33\ngenerator to get some variation in height in color now how we generate the\n40:39\nheight in color is all down to something we call peak us mods picaresque mods\nPQS Mods\n40:45\nmake planets good so here's Doudna looking rather resplendent so pqs mods\n40:56\nare simple monobehaviour components we attach two sub objects are the pqs\n41:05\nthey're compiled that start up into method chains which means that we can\n41:11\njust call the vertex build height method and it will execute all the entire chain\n41:18\nthey control all aspects of the planet life lifetime the obvious one being terrain\n41:25\ngeneration as we just said but there's also the game interface the pqs system\n41:31\nwas developed as a separate module so the game\n41:37\ncontrols the peak us through the mods and the peak us well is a very dumb\n41:43\nsystem so the mods controlled the peak us is a sort of like feedback loop we've\nPQS Mod Types\n41:49\ngot a few types of peak us mods I've got a vertex mod which comes in two flavors\n41:56\nhigh in color there are also color high or high colored mods we've got object\n42:02\nplacement and visibility so these position cities and objects on the\n42:09\nsurface they also control a level of detail of those objects we've got level\n42:16\nof detail of the pqs itself so for instance we might want to increase the level of detail of the coastal quads to\n42:24\ngive her a nice nicer coast so we've got mods to do that and we've also got\n42:31\nmaterial and shader mods these are there's some quite complicated shader\n42:38\nwork in a pqs depending on how the planets rendered so that's all done\n42:43\nthrough the mod mod so we've got a few methods in a generic mod on setup this\nPQS Mod Methods\n42:52\nmethod gathers requirements that the mod has so potentially it has vertex color\n42:58\nchannel or it requires custom normals or well the whole host of requirements and\n43:06\nthese can change how the pqs generates itself if it requires longitude and\n43:12\nlatitude for each coordinate for doing texture mapping or all the types of\n43:17\nmapping the on sphere star is how the pqs controls its startup so the first\n43:25\ntime it starts up it'll run it's on sphere star and there might be a mod\n43:30\nwhich says don't stop now so that sort of turns it on and off\n43:36\nthen we've got on vertex build height which is the classic build height when\n43:41\nwe want to generate the terrain height for position this mod weld the on vertex\n43:48\nbuild height methods have run so it just generates the height it doesn't generate any color or anything lower and then\n43:57\nwe've got build color if we're using vertex colors and on quad bill is used\n44:03\nfor assigning scatter or a variety of other little tricks that are per quad\n44:09\nthere are about 20 of these methods so not going into all of them\n44:15\nso very simple example here is a blank sphere add a simplex noise onto it\n44:24\nsimplex is like a pearl in noise but it's a bit faster at higher octaves so\n44:29\nwe tend to use it quite a bit then we use a clamp height mod so it makes a\n44:36\nnice little ocean type moon enhance ridges to kind of remove some of the\n44:42\nfractally the cloudiness service simplex or a pearl in there can be quite cloudy\n44:47\nand repetitive despite being fractals and then run a bit of height based color\n44:52\non top as well so we've got a nice little landscape there so quick talking\nShader Techniques\n44:59\nshader techniques we obviously use vertex color blending there's a variety\n45:05\nof ways to do this we've tried lots yeah\n45:12\nyou can spend a long time blending vertex colors we use it a try planar\n45:17\ntexture mapping technique to texture the actual planet triplane is good because\n45:22\nif you have ever ever tried to texture map a sphere you struggled because the\n45:28\nUV coordinates have to have a seam and generating that on the pqs at runtime is\n45:34\nquite tricky your sub normal mapping to make our ruggedness a bit more rugged\n45:39\nand there's two other techniques we use distance-based multi texturing so we\n45:47\nhave the detailed texture up close and further away we it comes fuzzier to avoid scaling and slope based multi\n45:55\ntexturing so the higher the slope the more rocky I get or if it's flatter\n46:02\nit might have a bit more Sund on it something here's a look at what a triplane texture map looks like it's\n46:09\ntexted over three planes since the name we've got an x y&z texture and with some\n46:17\nadditional mesh information you can generate a UV coordinate from the XY is\n46:23\nthat coordinate and use their try playing a technique and as you can see\n46:30\nwithout the grid and with a normal texture it looks it looks quite nice we\nPQS Rendering\n46:37\ncan also do smug things we can render a peak us out we can render it to texture\n46:42\nmaps and we can also use grayscale height maps which we can then re-import\n46:48\nusing the grayscale to normal normal map and we can use data maps as well because\n46:56\nsome pieces are not generated as planets but we use them as basis for other types\n47:01\nof maps the the Sun texture is generated using a shader with three data maps from\n47:10\na peak us it's very good for generating spherical data sets and we can also\n47:16\ngenerate a mesh and generally what we do is we wrap a geosphere mesh around a\n47:22\npeak us to generate the planet message for scaled space so here's his kerbin in\n47:29\nscaled space this has been rendered out to a normal map and a texture map so\n47:36\nthese are just from the vertex colors and from the vertex heights we tend to\n47:42\nnot use a mesh on planets with oceans so the blue color is actually defined by\n47:48\nthe renderer and this is because the coasts if you have a mesh look a bit odd\n47:54\nwithout doing some level of detail on the mesh router itself some smaller\n48:01\nmoons here's Paul using both well three normal texture and a\n48:09\nrapper so you can see it's got lots of height so when we blend between scale\n48:14\nspace and local space it blends nicely\n48:19\nwe've got fall as well which is an icy moon of Joule and Bop which is a bit\n48:25\nboring but it's quite lumpy so that's a good example now just a quick talk on\n48:31\nmodding KSP where wonders never cease\n48:36\nwe're often astounded by the things people can come up with so the early\nKSP's Early Setup\n48:42\nsetup of KSP there were part cold modules and these were things like a\n48:50\ncommand part wingler engine fuel tank control surfaces struts all these sort\n48:59\nof things were a single code module it had a text-based camping system which\n49:05\nwas pretty basic a Dae model loader which was again pretty basic and we\n49:13\ncould load PNG and JPEG textures\n49:19\nobviously when you give the promise of being able to mod things to people they\n49:26\nkind of go above and beyond what we expect so we had a user which took the\n49:33\nKSP DLL he compiled it he then injected DLL\n49:38\nloading code he recompiled it and at\n49:44\nthis point we're all thinking this could be terrible but what he did was actually\n49:50\nsend the results tools first to say you know can I distribute this thing we said\n49:55\nno but we hired him anyway so Rob now works for us I think he's on\n50:03\nthe web team but suffice to say the fruits of his Labor's are still still in KSP so having all this dll loading\nPartModules\n50:13\nthings made as no we needed to change the way that parts worked so we made a\n50:21\nmove towards part modules basically parts have multiple part modules this\n50:28\nmeans that the part code goes from defining all of the logic to just defining the attachment logic so there\n50:37\nare pretty much the only two types of part now there's a standard part which is it can attach to or the parts and\n50:44\nthere's a struct which has a start in an endpoint and then would define itself as\n50:50\nthose attachments the part module then defines the functional logic so we've\n50:58\ngot the command modules the engines the fuel tanks the wings all of those goodness goes into power modules this\n51:06\ngives us a lot more flexibility and allows us to have a single part which is a lifting body an engine a command pod\n51:12\nall rolled into one which would have been obviously impossible in the old system and then we've got internal space\nInternal Spaces\n51:21\ndefinitions in tails places varieties are quite late only a couple of updates ago parts can have a single internal\n51:29\nspace definition an internal space has a\n51:34\nsingle mesh object which it can load in but to give it variation and to\n51:43\nobviously have control we have things called internal props and internal space\n51:49\ncan have multiple internal props and then internal props then have a single\n51:54\nmesh object but to give them variation they have multiple internal modules so\n52:01\nthey become parts in a way and then our part internal modules are sort of like\n52:07\npart modules so you could have a nav ball which is a fuel display as well\n52:12\nand all these things but everything from a seat to an internal camera are all\n52:18\ndefined in internal modules through the config system so our comping system got\nConfigNode\n52:25\nupgraded to something we call config node it's its main aim was to be\n52:32\nbackward compatible with all the old config so we couldn't switch to using a\n52:37\nproprietary or you know a standard JSON type system basically it's a\n52:46\nstandardized text-based config system which consists of a hierarchy of nodes\n52:51\nand values and it's compiled and passed situationally meaning that whoever's\n53:00\ncompiling the whoever's loading and compiling the come Fink can do so in any\n53:09\nway they like so we're not restricted on what's actually inside these config knows here's a sample one from the\n53:17\nCoppola part you can see it's got a name which is you need a new knee ID it is a\n53:25\npart which is a standard part it's got a category mass a drag drag model type\n53:31\nit's then got to module nodes one of them is a command module which says it\n53:37\nrequires one minimum crew to operate properly it's got a SAS module and then\n53:43\nit's got an internal space definition which is the in a Coppola internal which\n53:50\nit would load via that name then we've got mu files new files are a custom\n54:00\nmodel file format that we use inside they contain a full unity hierarchy with\n54:06\na whole host of things which you can output from the unity editor and they're\n54:12\nset up and compiled by a unity editor plugin which is well this is the current\n54:19\nself so we've got the part part modules internal space blah blah blah\n54:25\nwe use the config note system we have a DLL loader to stop people right in their\n54:32\nown we use da and meu we've got a whole host of texture formats so the part\nPartTools\n54:40\ntools is what we use to generate user content it's a unity editor plugin\n54:46\nit allows people to compile assets you can create new files you can convert and\n54:52\ncreate textures you can load save and create internal space config so this is\n54:58\nthe position of the props and the\n55:04\nmodules and things that are on them here's a little screenshot of part tools\n55:09\nrunning an internal thing as you can see you can spawn various components and\n55:16\nsnap them and all that goodness right I think where's quickly running out time\n55:22\nI'm going to hand over to Felipe quickly for the final stint oh it's so pretty\n55:34\nshort time so we're gonna keep this quick as much as possible so well KSP is\n55:43\nstill being developed so we can't really say we've learned from it and that's it\n55:49\nwe're still learning we're still going and but if there's one thing that I\n55:54\nguess made all the difference way of KSP was that kerbals make it more\n56:02\nthan just a game about building spaceships so they're that a humanizing\n56:07\nelement they're what makes players relate to the game because now you have something you to care about or it's a\n56:15\ngleefully kill as needed so so but in\n56:21\nearnest interestingly enough we had no idea what kerbals would look like when we started so when we started we knew we\n56:29\nwanted them to have like big heads and bulging eyes but we didn't really know\n56:34\nwhat they were me so the design kind of evolved into this and then they grew hair so this is\n56:44\na already rigged up for appearing on a credible portrait and we\n56:49\njust made sure that their head meshes bent far enough that they could express\n56:54\ntheir delight or panic but really and then we realize we have this whole universe of kerbals they were just\n57:01\nbeginning to develop so there's a lot to take from this we don't really have a\nDevelopment Model\n57:09\nlot of time but uh so I'm gonna skip this so and and but uh going on\nCommunity Feedback\n57:26\ncommunity feedback I think this is was one of the biggest things for us when we started developing ksb we had a lot of\n57:33\nopen questions and because we released very early we were able to get community\n57:39\nfeedback at a point where it was actually very useful to us so for instance we didn't even know\n57:44\nwhether or not we were gonna leave the orbital mechanics in the game or not because we thought it might have been\n57:50\ntoo complex so when we release not only we discovered that people liked that\n57:56\nthey wanted more so so we kind of shaped away development went just because just from based on community feedback the one thing to take from that is that they can be very honest so you need to be ready for that because it's not all praise and eventually we get to a point which I call the feedback threshold which is the point where where your feedback can start to become misleading because players the really players that have been playing the game for over a year now want things that are different from what the new players need so you kind of have to balance so that's something that we're still it's an ongoing thing so we're always trying to balance on each update the features we add and stuff like that so make sure that it's entertaining for for it's something that it's good for new players and it also something of value for players that have been added from the beginning so that's it I guess there is alright thank you so very much there will be coffee in ballroom see if you want to join us and have a great rest of the day thank you so much [Applause]\n\n\n## Metadata\n- **Source**: All of it Anything Everything At Once/ksp-gdc.txt\n- **Type**: document\n- **Tags**: document, All_of_it_Anything_Everything_At_Once, quest, feature, mechanic, bug\n- **Imported**: 2025-05-05T16:25:37.144Z",
  "source": {
    "type": "notebook",
    "path": "All of it Anything Everything At Once/ksp-gdc.txt",
    "importedAt": "2025-05-05T16:25:37.144Z"
  },
  "created": "2025-05-05T16:25:37.144Z",
  "modified": "2025-05-05T16:25:37.144Z",
  "tags": [
    "document",
    "All_of_it_Anything_Everything_At_Once",
    "quest",
    "feature",
    "mechanic",
    "bug"
  ]
}