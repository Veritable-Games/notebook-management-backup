{
  "title": "swarm-intelligence",
  "content": "# swarm-intelligence\n\nContent-Type: text/x-zim-wiki\nWiki-Format: zim 0.6\nCreation-Date: 2024-07-23T23:07:30-07:00\n\n====== swarm-intelligence ======\n\r\n0:00\r\nHi everyone! Today I’m going to show  \r\n0:08\r\nyou my experiment on using swarm intelligence. I’ve called the project \"Screaming Insects\".\r\n0:14\r\nI’d like to note that the exact definition of  swarm intelligence is still not formulated.\r\n0:19\r\nLet's open Wikipedia and read the definition:\r\n0:23\r\nThe agents follow simple rules, and although there  is no centralized control structure dictating how  \r\n0:30\r\nindividual agents should behave, local, and to  a certain degree random, interactions between  \r\n0:37\r\nsuch agents lead to the emergence of \"intelligent\"  global behavior, unknown to the individual agents\r\n0:45\r\nBy intelligence here, we mean not that  a swarm of agents will begin to raise  \r\n0:51\r\nphilosophical questions, but the fact that they  will jointly solve a problem, the solution of  \r\n0:57\r\nwhich is not obvious from a simple algorithm of  the agent, but is revealed in their joint actions.\r\n1:05\r\nWell, here’s today's task  for the \"Screaming Insects\":  \r\n1:09\r\nto look for resources and  deliver them to the base.\r\n1:14\r\nOn the right side of the screen, you see what  we're going to have at the end of the video. \r\n1:19\r\nThe agents are looking for resources  and deliver them to the base. \r\n1:24\r\nThe agent's algorithm is very simple; the agent is  blind, walks crookedly, and can only contact the  \r\n1:32\r\nnearest agents, but acting together, they quickly  find a resource and a short path to the base.\r\n1:40\r\nThe topic is very interesting. Researchers  are trying different approaches. \r\n1:46\r\nIn my opinion, this will become widespread when  the agents are located on different physical  \r\n1:52\r\ndevices and there will be a problem  in creating a centralized management.\r\n2:00\r\nLet’s get back to the \"Screaming Insects\" project.\r\n2:06\r\nThis is our agent. He has a direction, and his  task is to run between point A and point B. \r\n2:12\r\nNow he needs to find point A. Since there are only 2 points,  \r\n2:17\r\nthe agent has 2 counters, in which the estimated  number of steps to each point is recorded.\r\n2:23\r\nWith each turn, these counters increase by one,  no matter which direction the agent is going. \r\n2:29\r\nAnd with every turn, he shouts out the  value of one of his counters plus 50. \r\n2:35\r\n50 is the maximum distance at  which his scream can be heard. \r\n2:38\r\nHe sort of notifies everyone who hears him  that there is the same number of steps to this  \r\n2:45\r\npoint as for him, plus an additional 50 steps. The agent doesn’t see anything, moves by touch,  \r\n2:51\r\nand must bump into an item to understand  that he has arrived at his destination. \r\n2:56\r\nHere, the Agent has bumped into one  of the items, perhaps by accident. \r\n3:03\r\nHe is resetting the counter  corresponding to this item. \r\n3:07\r\nIf this is exactly the item that he has been  looking for, he will turn 180 degrees and continue  \r\n3:14\r\nto move on. Now he needs to find point B. And here is where the magic happens. \r\n3:19\r\nHe is heard by the second agent  located within a radius of 50 steps. \r\n3:25\r\nThe second agent compares the value he  hears with the value from his counter. \r\n3:29\r\nIf the values ​​heard are less, the second agent  updates his counter corresponding to point A, that  \r\n3:36\r\nis, he writes down the value that he has heard. Now he believes that there are 51 steps from  \r\n3:42\r\nhim to point A. 50 steps to the  \r\n3:44\r\nfirst agent and one more step to point A. If the second agent was moving to point A,  \r\n3:50\r\nthen he would turn in the direction of the  shouting, but now he is going to point B. \r\n3:55\r\nNow the second agent notifies the others  that they are 101 steps from point A. \r\n4:01\r\nThat is, 50 steps to reach it, and  from there to point A – 51 steps. \r\n4:08\r\nThis was heard by the third agent. He updates  his counter, and as he is going to point A,  \r\n4:13\r\nhe turns in the direction of shouting. Please note that the direction of the third  \r\n4:19\r\nagent has become even worse than before. This will often happen locally. \r\n4:24\r\nBut globally, abstract swarm intelligence will  see the whole picture through the gradient of  \r\n4:30\r\ncounter values ​​for agents, and as a result,  all agents will reach their destination.\r\n4:36\r\nSo, here’s the Agent’s algorithm: Take a step and increase all the counters by one. \r\n4:42\r\nIf you bump into one of the items,  reset the respective counter. \r\n4:46\r\nIf this is the destination you were willing  to reach, turn around 180 degrees and  \r\n4:52\r\nchange the destination objective in your head. Shout out the value of one of your counters plus  \r\n4:59\r\nthe maximum distance you can be heard at. Listen to what the others are shouting. \r\n5:04\r\nIf you have heard a value less than in  your counter, update the respective counter \r\n5:10\r\nand turn in the direction of the  shouting if you need to reach this place.\r\n5:17\r\nFirst implementation \r\n5:21\r\nHere, the agent must shuttle  between the two bases. \r\n5:25\r\nThe operation principle is slightly  different from what I have described before,  \r\n5:30\r\nbut the picture has turned out to be  interesting, so I will show it here. \r\n5:34\r\nThere are 1600 agents on the field, and a shout  out can be heard at a distance of 38 pixels. \r\n5:42\r\nTo understand the scale, I will  put a ruler with a scale of 38  \r\n5:46\r\npixels and circles with the same radius. Lines will be displayed on the screen,  \r\n5:51\r\nconnecting the one who shouts  and the one who is listening,  \r\n5:55\r\nprovided that the shouting  has led to counter update.\r\n5:58\r\nThe main difference is that the agent only  shouts out when one of his counters is updated,  \r\n6:04\r\nso the initialization of the shout  wave comes from one of the bases. \r\n6:09\r\nAnd then the wave passes where the  distance between the agents allows. \r\n6:14\r\nAfter some time, something  like paths begin to form. \r\n6:20\r\nI'm starting the video.\r\n6:21\r\nMost of the time, agents walk in silence,  \r\n6:25\r\nbut even such uncommunicative agents  have managed to build a path in the end. \r\n6:30\r\nCritically important here is the number of agents  per unit area and also the range of the shout out. \r\n6:37\r\nReducing the distance even by one pixel leads to  the fact that the path is created much longer. \r\n6:44\r\nNow I've sped up the playback for you to see that  over time, the path tends to become straight. \r\n6:50\r\nAlso, the system has a feature that is a  direct consequence of the operation principles:  \r\n6:55\r\nin the presence of two paths, the  longer path dies off immediately.\r\n7:01\r\nIn the end, I have come to the  conclusion that with each turn,  \r\n7:04\r\nagents should report the state  of one of their counters.\r\n7:11\r\nNow I will show you some interesting points  that I have pointed out during the experiments. \r\n7:17\r\nWe have two blue bases on the right side  and orange resources on the left side. \r\n7:22\r\nLet’s launch the agents. The agents have found all  \r\n7:27\r\nthe targets, but look what happens. The central resource is closer to the  \r\n7:31\r\nbases than other resources, and therefore, the  agents prefer to go only to where it’s located. \r\n7:37\r\nAnd the central resource is closer to  the higher base, so the agents prefer  \r\n7:43\r\nto carry the resource to this base. This is exactly the feature I was  \r\n7:48\r\ntalking about: long paths die off quickly. Sometimes it's helpful, sometimes it's harmful. \r\n7:55\r\nFor example, in the final implementation,  each agent is assigned exactly which of  \r\n8:02\r\nthe resources he should bring so that he  is not distracted by the nearest ones.\r\n8:07\r\nAnd one more thing. The path has been  formed. I put the resource next to the path,  \r\n8:13\r\nbut since the agents are blind, they will walk by. \r\n8:18\r\nTherefore, in the final version, some  of the agents are scouts who do not  \r\n8:22\r\ndeliver the resource, but simply survey the  surroundings and help transmit messages. \r\n8:30\r\n\nAnd here’s one more trick. The resource has disappeared,  \r\n8:34\r\nand now the agents begin to move in a wide  fanю This helps to find the resource faster. \r\n8:41\r\nAnd this happens because after each step,  \r\n8:44\r\nthey randomly change direction by a  small angle. They cannot walk straight. \r\n8:51\r\nSee what would happen if  they could walk straight.\n \r\n8:59\r\nAnd the last moment here: the agents  should not only walk crookedly,  \r\n9:03\r\nbut they should also have different speeds. \r\n9:06\r\nIf you set the same speed for everyone,  the path often gets destroyed,  \r\n9:11\r\nturning into a group that roams to one  point and then all together to another.\r\n9:16\r\nIt seems that we have mentioned all the points,  \r\n9:20\r\nand now we are moving on to the final  implementation of the “Screaming Insects” project.\r\n9:28\r\nSo, the Legend goes as follows: There are three types of resources:  \r\n9:34\r\nred, green, and blue. These are agents going  \r\n9:38\r\nafter a red, green, and blue resource. And this is how they look like when  \r\n9:44\r\nthey have grabbed the resource and  are carrying it back to the Queen. \r\n9:48\r\nAlso, among the agents, there are scouts who move  \r\n9:52\r\naround the area and don’t have a  particular goal to find resources. \r\n9:57\r\nBut if they bump into a resource,  they carry it to the Queen. \r\n10:02\r\nAnd this is the Queen; the circle in  the center shows her health state.\r\n10:08\r\nLet’s go.\r\n10:10\r\nTo challenge it a bit, resources  are constantly moving, moreover,  \r\n10:15\r\nthe Queen herself is constantly on the move,  shifting towards the furthest resource.\r\n10:22\r\nThe agents have a lifespan,  and eventually, they will die. \r\n10:26\r\nBut the Queen, if all the three resources  are brought to her, can create a new agent. \r\n10:32\r\nOr, with some probability, she can spend  the resource on extending her life. \r\n10:38\r\nBesides, any agent, being 1000 steps from  the Queen, can declare himself the Queen, \r\n10:45\r\nstart shouting around the district  that the Queen is only 50 steps away,  \r\n10:50\r\ntake resources from the approaching  agents, and create new ones. \r\n10:54\r\nOn the screen, you can already  see how new Queens are appearing.\r\n11:00\r\nBy the way, the agents don’t  care about whose Queen it is,  \r\n11:04\r\nand carry resources to where it is closer.\r\n11:07\r\nNewly emerged Queens need to quickly get all the  \r\n11:11\r\nthree resources to have enough  time to prolong their lives. \r\n11:15\r\nIt all depends on good luck. It is necessary to  be close to resources and have many agents nearby.\r\n11:23\r\nResources are of a fairly small capacity, a swarm  of agents devastates them in just a few seconds. \r\n11:31\r\nFew resources manage to get away if  they are discovered by the swarm.  \r\n11:36\r\nThe only salvation is if the same resources are  located nearby and the agents switch to them.\r\n11:44\r\nWell, next I’ll share my fantasies.\r\n11:47\r\nThere are caravans, so you need to learn how  to rob them and take the prey to your Queen.\r\n11:53\r\nOr we can create an economic simulation. Each  Queen sets her own price for each resource. \r\n12:00\r\nThe agent must decide whether to carry them close,  but be paid cheap, or move them far, but for a  \r\n12:08\r\nhigh price, although facing a risk to be robbed. And all this to save up to buy a house and retire\r\n12:15\r\nSpeaking of construction. I would like agents to not only carry resources,  \r\n12:20\r\nbut also to engage in construction. I found an algorithm online showing  \r\n12:25\r\nhow termites build their termite mounds. Guided by this algorithm, thousands of unorganized  \r\n12:32\r\ninsects build a complex multi-tiered maze as  a result. They have no plans, no blueprints.\r\n12:39\r\nBut I still couldn't understand it. Perhaps you have some ideas  \r\n12:44\r\non how to implement this. Please leave your comments.\r\n12:49\r\nThanks to everyone who supports us on patreon. More support, more opportunities for new projects.\r\n12:57\r\nWell, that's all for now, bye everyone!\n\n\n## Metadata\n- **Source**: All of it Anything Everything At Once/swarm-intelligence.txt\n- **Type**: document\n- **Tags**: document, All_of_it_Anything_Everything_At_Once, item, quest, feature\n- **Imported**: 2025-05-05T16:25:37.201Z",
  "source": {
    "type": "notebook",
    "path": "All of it Anything Everything At Once/swarm-intelligence.txt",
    "importedAt": "2025-05-05T16:25:37.201Z"
  },
  "created": "2025-05-05T16:25:37.201Z",
  "modified": "2025-05-05T16:25:37.201Z",
  "tags": [
    "document",
    "All_of_it_Anything_Everything_At_Once",
    "item",
    "quest",
    "feature"
  ]
}