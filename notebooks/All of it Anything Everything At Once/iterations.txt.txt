Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-07-23T15:15:21-07:00

====== iterations.txt ======
To add more states to the running method, we need to modify the existing code. We can add a new variable called "sprintMomentum" to keep track of the current momentum level. We can also add four new variables to store the maximum momentum levels for each stage. Here's the modified code:


[SerializeField] private float[] sprintMomentumThresholds = { 0f, 2f, 4f, 6f };
[SerializeField] private float[] sprintSpeeds = { 6f, 7f, 8f, 9f };
private int sprintMomentum = 0;


Next, we need to modify the code that handles sprinting. Instead of just setting the "isSprinting" flag, we need to update the "sprintMomentum" variable based on how long the player has been holding down the sprint key. We can use the "Time.time" variable to calculate the sprint duration. Here's the modified code:


if (Input.GetKey(sprintKey))
{
	sprintMomentum = Mathf.Min(sprintMomentum + 1, sprintMomentumThresholds.Length - 1);
}
else
{
	sprintMomentum = 0;
}


Finally, we need to modify the code that moves the character. We can use the "sprintMomentum" variable to determine the current sprint speed. We can also update the animation based on the current sprint momentum level. Here's the modified code:


if (direction.magnitude >= 0.1f)
{
	float targetAngle = Mathf.Atan2(direction.x, direction.z) * Mathf.Rad2Deg;
	transform.rotation = Quaternion.Euler(0f, targetAngle, 0f);
	if (isCrouching)
	{
		controller.Move(direction * crouchSpeed * Time.deltaTime);
	}
	else
	{
		float currentSpeed = isSprinting ? sprintSpeeds[sprintMomentum] : speed;
		controller.Move(direction * currentSpeed * Time.deltaTime);
		// Update animation
		float sprintProgress = (float)sprintMomentum / (float)(sprintMomentumThresholds.Length - 1);
		float animationSpeed = Mathf.Lerp(1f, 2f, sprintProgress);
		// Update animation speed
	}
}


This code should add the ability to sprint with increasing speed based on how long the player holds down the sprint key. The animation should also update to reflect the current sprint momentum level.


1.Implement a crouch feature:
-Add a new serialized float variable called "crouchSpeed" to control the speed of the crouch movement.
- Add a new serialized float variable called "crouchHeight" to control the height of the character when crouching.
- Add a new serialized KeyCode variable called "crouchKey" to set the key for crouching.
- Add a new bool variable called "isCrouching" to track whether the character is crouching or not.
- Modify the "Update" method to check if the crouch key is pressed and set the "isCrouching" variable accordingly.
- Modify the "Move character" section to reduce the speed to "crouchSpeed" if the character is crouching.
- Modify the "Apply motion" section to set the character's height to "crouchHeight" if the character is crouching.

2. Implement a sprint feature:
-Add a new serialized float variable called "sprintSpeed" to control the speed of the sprint movement.
- Add a new serialized KeyCode variable called "sprintKey" to set the key for sprinting.
- Add a new bool variable called "isSprinting" to track whether the character is sprinting or not.
- Modify the "Update" method to check if the sprint key is pressed and set the "isSprinting" variable accordingly.
- Modify the "Move character" section to increase the speed to "sprintSpeed" if the character is sprinting.

3. Implement a camera rotation feature:
-Add a new serialized Transform variable called "cameraTransform" to reference the camera transform.
- Add a new serialized float variable called "lookSpeed" to control the speed of the camera rotation.
- Modify the "Update" method to get the mouse input and rotate the camera transform accordingly using "lookSpeed".

Here is the modified code:

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
	[SerializeField] private CharacterController controller;
	[SerializeField] private float speed = 6f;
	[SerializeField] private float jumpForce = 10f;
	[SerializeField] private float jumpDelay = 0.1f;
	[SerializeField] private LayerMask groundMask;
	[SerializeField] private float crouchSpeed = 3f;
	[SerializeField] private float crouchHeight = 1f;
	[SerializeField] private KeyCode crouchKey = KeyCode.LeftControl;
	[SerializeField] private float sprintSpeed = 9f;
	[SerializeField] private KeyCode sprintKey = KeyCode.LeftShift;
	[SerializeField] private Transform cameraTransform;
	[SerializeField] private float lookSpeed = 3f;

	private Vector3 motion;
	private bool isGrounded;
	private float lastJumpTime;
	private bool isCrouching;
	private bool isSprinting;

	public static CursorLockMode lockState { get; set; }
	public static bool visible { get; set; }

	private void Update()
	{
		// Get input
		float moveHorizontal = Input.GetAxis("Horizontal");
		float moveVertical = Input.GetAxis("Vertical");
		Vector3 moveDirection = new Vector3(moveHorizontal, 0.0f, moveVertical);

		// Handle jump
		isGrounded = Physics.CheckSphere(transform.position, controller.radius, groundMask);
		if (Input.GetButtonDown("Jump") && Time.time >= lastJumpTime + jumpDelay && isGrounded)
		{
			motion.y = jumpForce;
			lastJumpTime = Time.time;
		}

		// Handle crouch
		if (Input.GetKeyDown(crouchKey))
		{
			isCrouching = !isCrouching;
		}

		// Handle sprint
		if (Input.GetKey(sprintKey))
		{
			isSprinting = true;
		}
		else
		{
			isSprinting = false;
		}

		// Move character
		Vector3 direction = moveDirection.normalized;
		if (direction.magnitude >= 0.1f)
		{
			float targetAngle = Mathf.Atan2(direction.x, direction.z) * Mathf.Rad2Deg;
			transform.rotation = Quaternion.Euler(0f, targetAngle, 0f);
			if (isCrouching)
			{
				controller.Move(direction * crouchSpeed * Time.deltaTime);
			}
			else if (isSprinting)
			{
				controller.Move(direction * sprintSpeed * Time.deltaTime);
			}
			else
			{
				controller.Move(direction * speed * Time.deltaTime);
			}
		}

		// Apply gravity
		if (!isGrounded)
		{
			motion.y -= 9.81f * Time.deltaTime;
		}

		// Apply motion
		if (isCrouching)
		{
			controller.height = crouchHeight;
		}
		else
		{
			controller.height = 2f;
		}
		controller.Move(motion * Time.deltaTime);

		// Reset motion
		if (isGrounded && motion.y < 0f)
		{
			motion.y = -2f;
		}

		// Unlock cursor
		if (Input.GetKeyDown(KeyCode.Escape))
		{
			Cursor.lockState = CursorLockMode.None;
			Cursor.visible = true;
		}
		else
		{
			Cursor.lockState = CursorLockMode.Locked;
			Cursor.visible = false;
		}

		// Handle camera rotation
		float mouseX = Input.GetAxis("Mouse X") * lookSpeed;
		float mouseY = Input.GetAxis("Mouse Y") * lookSpeed;
		transform.Rotate(Vector3.up, mouseX);
		cameraTransform.Rotate(Vector3.right, -mouseY);
	}
}
